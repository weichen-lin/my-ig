// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: file.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO "file" (name, url, user_id, locate_at) VALUES ($1, $2, $3, $4) RETURNING id, name, url, created_at, last_modified_at, user_id, locate_at, description
`

type CreateFileParams struct {
	Name     string    `json:"name"`
	Url      string    `json:"url"`
	UserID   uuid.UUID `json:"userId"`
	LocateAt uuid.UUID `json:"locateAt"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.LocateAt,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.UserID,
		&i.LocateAt,
		&i.Description,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
SELECT id, name, url, created_at, last_modified_at, user_id, locate_at, description FROM "file" WHERE id = $1 and user_id = $2
`

type GetFileParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) GetFile(ctx context.Context, arg GetFileParams) (File, error) {
	row := q.db.QueryRow(ctx, getFile, arg.ID, arg.UserID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.UserID,
		&i.LocateAt,
		&i.Description,
	)
	return i, err
}

const renameFile = `-- name: RenameFile :one
UPDATE "file" SET name = $1, last_modified_at = $2 WHERE id = $3 AND user_id = $4 RETURNING id, name, url, created_at, last_modified_at, user_id, locate_at, description
`

type RenameFileParams struct {
	Name           string    `json:"name"`
	LastModifiedAt time.Time `json:"lastModifiedAt"`
	ID             uuid.UUID `json:"id"`
	UserID         uuid.UUID `json:"userId"`
}

func (q *Queries) RenameFile(ctx context.Context, arg RenameFileParams) (File, error) {
	row := q.db.QueryRow(ctx, renameFile,
		arg.Name,
		arg.LastModifiedAt,
		arg.ID,
		arg.UserID,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.LastModifiedAt,
		&i.UserID,
		&i.LocateAt,
		&i.Description,
	)
	return i, err
}

const selectFileDescription = `-- name: SelectFileDescription :one
SELECT description FROM "file" WHERE id = $1 AND user_id = $2
`

type SelectFileDescriptionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) SelectFileDescription(ctx context.Context, arg SelectFileDescriptionParams) (*string, error) {
	row := q.db.QueryRow(ctx, selectFileDescription, arg.ID, arg.UserID)
	var description *string
	err := row.Scan(&description)
	return description, err
}

const selectFiles = `-- name: SelectFiles :many
SELECT id, name, last_modified_at FROM "file" WHERE locate_at = $1 AND user_id = $2 ORDER BY last_modified_at ASC
`

type SelectFilesParams struct {
	LocateAt uuid.UUID `json:"locateAt"`
	UserID   uuid.UUID `json:"userId"`
}

type SelectFilesRow struct {
	ID             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	LastModifiedAt time.Time `json:"lastModifiedAt"`
}

func (q *Queries) SelectFiles(ctx context.Context, arg SelectFilesParams) ([]SelectFilesRow, error) {
	rows, err := q.db.Query(ctx, selectFiles, arg.LocateAt, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectFilesRow
	for rows.Next() {
		var i SelectFilesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.LastModifiedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileDescription = `-- name: UpdateFileDescription :exec
UPDATE "file" SET description = $1 WHERE id = $2 AND user_id = $3
`

type UpdateFileDescriptionParams struct {
	Description *string   `json:"description"`
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"userId"`
}

func (q *Queries) UpdateFileDescription(ctx context.Context, arg UpdateFileDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateFileDescription, arg.Description, arg.ID, arg.UserID)
	return err
}
